{"version":3,"sources":["../../src/server/index.js"],"names":["require","config","app","APP_PORT","process","env","mongodb","MongoClient","url","MONGO_URI","use","express","static","path","resolve","__dirname","get","req","res","connect","useUnifiedTopology","e","client","console","log","db","Terminals","collection","latUser","longUser","aggregate","$match","latitude","$gte","Number","$lte","longitude","$lookup","from","localField","foreignField","as","toArray","terminals","result","ratioLat","Math","cos","PI","tenKmLat","minLat","maxLat","ratioLong","tenKmLong","minLong","maxLong","forEach","elem","index","Object","getOwnPropertyNames","bankDetails","length","country","push","json","params","listen"],"mappings":"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","sourcesContent":["/* becodeorg/trouvkach\n *\n * /src/server/index.js - Server entry point\n *\n * coded by yousef\n * started at 03/12/2019\n */\n\nrequire(\"dotenv\").config();\n\nimport express from \"express\";\nimport path from \"path\";\n\nconst app = express();\nconst {APP_PORT} = process.env;\n\nconst mongodb = require(\"mongodb\");\nconst MongoClient = mongodb.MongoClient;\nconst url = process.env.MONGO_URI;\n\napp.use(express.static(path.resolve(__dirname, \"../../bin/client\")));\n\napp.get(\"/test\", (req, res)=> {\n    MongoClient.connect(url, {useUnifiedTopology: true}, (e, client) => {\n        if (e === null) {\n            console.log(\"Terminals Connected\");\n\n            const db = client.db(\"trouvkash\");\n            const Terminals = db.collection(\"terminals\");\n            const latUser = 50.633179;\n            const longUser = 5.587107;\n\n            Terminals.aggregate([\n                {\n\n                    $match: {\n                        latitude: {\n                            $gte: Number(latUser) - 0.01,\n                            $lte: Number(latUser) + 0.01,\n                        },\n\n                        longitude: {\n                            $gte: Number(longUser) - 0.02,\n                            $lte: Number(longUser) + 0.02,\n                        },\n                    },\n                },\n                {\n                    $lookup: {\n                        from: \"banks\",\n                        localField: \"bank\",\n                        foreignField: \"_id\",\n                        as: \"bankDetails\"\n                    }\n                }\n            ])\n            .toArray((e, terminals) => {\n                const result = [];\n\n                const latitude = Number(latUser);\n                const ratioLat = Math.cos((latUser * Math.PI) /180) * 111;\n                const tenKmLat = (1/ratioLat) *0.75;\n                const minLat = latitude - tenKmLat;\n                const maxLat = latitude + tenKmLat;\n\n                const longitude = Number(longUser);\n                const ratioLong = Math.cos((longUser * Math.PI) /180) * 85;\n                const tenKmLong = (1/ratioLong) *1.5;\n                const minLong = longitude - tenKmLong;\n                const maxLong = longitude + tenKmLong;\n\n                terminals.forEach((elem, index)=> {\n                    if(Object.getOwnPropertyNames(elem.bankDetails).length <=1)\n                    {\n                        elem.bankDetails = [{}];\n                        elem.bankDetails[0].country = \"N/A\";\n                    }\n\n                    if(elem.latitude > minLat && elem.latitude < maxLat && (elem.longitude > minLong && elem.longitude < maxLong)) {\n                        result.push(elem);\n                    }\n                    index === terminals.length -1 && res.json(result);\n                })\n            })\n    }})})\n\n\n\n\napp.get(\"/:latitude/:longitude\", (req, res)=> {\n    MongoClient.connect(url, {useUnifiedTopology: true}, (e, client) => {\n        if (e === null) {\n            console.log(\"Terminals Connected\");\n\n            const db = client.db(\"trouvkash\");\n            const Terminals = db.collection(\"terminals\");\n            Terminals.aggregate([\n                {\n\n                    $match: {\n                        latitude: {\n                            $gte: Number(req.params.latitude) - 0.01,\n                            $lte: Number(req.params.latitude) + 0.01,\n                        },\n\n                        longitude: {\n                            $gte: Number(req.params.longitude) - 0.02,\n                            $lte: Number(req.params.longitude) + 0.02,\n                        },\n                    },\n                },\n                {\n                    $lookup: {\n                        from: \"banks\",\n                        localField: \"bank\",\n                        foreignField: \"_id\",\n                        as: \"bankDetails\"\n                    }\n                }\n            ])\n            .toArray((e, terminals) => {\n                const result = [];\n\n                const latitude = Number(req.params.latitude);\n                const ratioLat = Math.cos((req.params.latitude * Math.PI) /180) * 111;\n                const tenKmLat = (1/ratioLat) *0.75;\n                const minLat = latitude - tenKmLat;\n                const maxLat = latitude + tenKmLat;\n\n                const longitude = Number(req.params.longitude);\n                const ratioLong = Math.cos((req.params.longitude * Math.PI) /180) * 85;\n                const tenKmLong = (1/ratioLong) *1.5;\n                const minLong = longitude - tenKmLong;\n                const maxLong = longitude + tenKmLong;\n\n                terminals.forEach((elem, index)=> {\n                    if(Object.getOwnPropertyNames(elem.bankDetails).length <=1)\n                    {\n                        elem.bankDetails = [{}];\n                        elem.bankDetails[0].country = \"N/A\";\n                    }\n\n                    if(elem.latitude > minLat && elem.latitude < maxLat && (elem.longitude > minLong && elem.longitude < maxLong)) {\n                        result.push(elem);\n                    }\n                    index === terminals.length -1 && res.json(result);\n                })\n            })\n    }})})\n\napp.listen(APP_PORT, () =>\n    console.log(\"RocketIcon Server is listening on port ${APP_PORT}.\"),\n);"],"file":"index.js"}